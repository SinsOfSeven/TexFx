namespace = TexFx

[ShaderRegexOutlineTransparency]
shader_model = ps_4_0 ps_5_0
filter_index = 037730.0
temps = ini tex69 dim
if ps-t69 === 0 && $texfx_on
 run = CommandListSetResourceReferences
 run = CommandListSwapVersion
endif
ps-t69 = null

; Regex Match ---------------------------------------
;Match Outline
[ShaderRegexOutlineTransparency.Pattern]
(?P<MatchDiffuse>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n
^[\s\S]+)
(?s)(?P<TillModesty>^discard_nz r\d\.[xy]\nne r\d\.*\nif_nz r\d\.[xy]\n\s*lt.*?)
(?P<Modesty>discard\w+ \w+\.[xyzw]+\n)
(?P<TillRet>.*)
ret

[ShaderRegexOutlineTransparency.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t69
dcl_sampler s15, mode_default

[ShaderRegexOutlineTransparency.Pattern.Replace]
${MatchDiffuse}
ld_indexable(texture1d)(float,float,float,float) ${ini}.xyzw, l(69,0), t120.xyzw\n
${TillModesty}
\s\s if_z ${ini}.z\n
\s\s\s\s ${Modesty}
\s\s endif\n
;
${TillRet}
if_z ${ini}.y\n
\s\s resinfo_indexable(texture2d)(float,float,float,float) ${dim}.xyyy, l(0), t69.xyzw\n
\s\s if_nz ${dim}.xy\n
\s\s\s\s sample_indexable(texture2d)(float,float,float,float) ${tex69}.xyzw, v2.xy, t69.xyzw, s0\n
; Green Channel
; \s\s\s\s if_nz ${tex69}.y\n
; \s\s\s\s\s\s  mov o1.w, ${tex69}.y\n
; \s\s\s\s endif\n
; Blue Channel
; \s\s\s\s ge ${dim}.w, ${tex69}.z, l(0.2)\n
; \s\s\s\s lt ${dim}.z, ${tex69}.z, l(0.8)\n
; \s\s\s\s and ${dim}.w, ${dim}.w, ${dim}.z\n
; \s\s\s\s discard_nz ${dim}.w\n
;Red Channel
\s\s\s\s discard_nz ${tex69}.x\n
\s\s endif\n
endif\n
ret
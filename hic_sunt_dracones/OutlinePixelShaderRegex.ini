namespace = TexFx

[ShaderRegexOutlineTransparency]
shader_model = ps_4_0 ps_5_0
filter_index = 037730.555
temps = ini tex69 tex70 dim texcoord
if ps-t69 === 0 && $texfx_on
	run = CommandListSwapVersion
	run = CommandListClearInstanceValues
	run = CommandListResetResources
endif
;run = CommandListClearInstanceValues
if ps-t70 === 0
	post ps-t70 = null
endif

; Regex Match ---------------------------------------
;Match Outline
[ShaderRegexOutlineTransparency.Pattern]
(?s)(?P<MatchOutline>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n
.*)
(?P<ModestyB>^\s+if_nz -?r\d+\.\w+\n
^\s+div -?r\d+\.\w+, v?\d+\.\w+, v?\d+\.\w+\n
^\s+mul -?r\d+\.\w+, -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+\n
^\s+mul -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+\)\n
^\s+ge -?r\d+\.\w+, -?r\d+\.\w+, -?r\d+\.\w+\n
^\s+frc -?r\d+\.\w+, \|-?r\d+\.\w+\|\n
^\s+movc -?r\d+\.\w+, -?r\d+\.\w+, -?r\d+\.\w+, -?r\d+\.\w+\n
^\s+mul -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+, -?\d*\.?\d+\)\n
^\s+ftou -?r\d+\.\w+, -?r\d+\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+dp\d+\ r\d+\.\w+, -?r\d+\.\w+, icb\[r\d+\.\w+ \+.?\d+\]\.\w+\n
^\s+mad -?r\d+\.\w+, -?cb\d\[\d+\]\.\w+, l\(-?\d*\.?\d+\), -?r\d+\.\w+\n
^\s+add -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+\)\n
^\s+lt -?r\d+\.\w+, -?r\d+\.\w+, l\(-?\d*\.?\d+\)\n.*)
(?P<TillTexcord>sample_[b_]{0,2}indexable\(texture2d\)\(float,float,float,float\) r\d\d?\.[xyzw]+, (?P<TexcoordX>[rv]\d\d?\.xyxx), t[012].[xyzw]+, s\d(, \w\d+(\.[xyzw]+)?)?$)
(?P<TillSetColor>.*else\s*mov (?P<color>r\d\.[xyzw]+), v\d\.[xyzw]+.*endif)
(?P<TillRet>.*)
ret

[ShaderRegexOutlineTransparency.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t69
dcl_resource_texture2d (float,float,float,float) t70
dcl_sampler s14, mode_default
dcl_sampler s15, mode_default

[ShaderRegexOutlineTransparency.Pattern.Replace]
${MatchOutline}\n
${ModestyB}
${TillTexcord}\n
mov ${texcoord}.xyzw, ${TexcoordX}\n
${TillSetColor}\n
; debugging, set constant outline color

; Custom Outline Colors, Sponsered by Annplan.
ld_indexable(texture1d)(float,float,float,float) ${ini}.xyzw, l(69,0), t120.xyzw\n
if_z ${ini}.y\n
\t	resinfo_indexable(texture2d)(float,float,float,float) ${dim}.xyyy, l(0), t70.xyyy\n
\t	if_nz ${dim}.xy\n
\t\t	sample_indexable(texture2d)(float,float,float,float) ${tex70}.xyzw, ${texcoord}.xyzw, t70.xyzw, s14\n
\t\t	mov ${color}, ${tex70}.xyzw\n
;\t\t	add ${tex70}.w, ${tex70}.w, -l(0.5)\n
;\t\t	max ${tex70}.w, ${tex70}.w, l(0.0)\n
;\t\t	discard_z ${tex70}.w\n
\t	endif\n
endif\n
; mov ${color}, l(0.1,0.2,0.3,1.0)\n
${TillRet}
if_z ${ini}.y\n
; TexFx Discard Outlines
\t	resinfo_indexable(texture2d)(float,float,float,float) ${dim}.xyzw, l(0), t69.xyzw\n
\t	if_nz ${dim}.xy\n
\t\t	sample_indexable(texture2d)(float,float,float,float) ${tex69}.xyzw, ${texcoord}.xyzw, t69.xyzw, s15\n
; Green Channel
;
; Blue Channel
;
; Red Channel
\t\t	if_nz ${ini}.w\n
\t\t\t		add ${tex69}.x, ${tex69}.x, l(-1.0)\n
\t\t\t		discard_z ${tex69}.x\n
\t\t	endif\n
\t\t	if_z ${ini}.w\n
\t\t\t		discard_nz ${tex69}.x\n
\t\t	endif\n
\t	endif\n
endif\n
; debugging, remove outline
; discard_z l(0)\n
ret
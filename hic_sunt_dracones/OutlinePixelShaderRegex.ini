namespace = TexFx

[ShaderRegexOutlineTransparency]
shader_model = ps_5_0 ps_5_1
temps = ini tex69
z69 = $modesty
if ps-t69 === 0
	;handling = skip
	run = CommandListSetResourceReferences
	if $use_default_shader == 0
		run = CustomShaderTransparencyDefault0
		$use_default_shader = -1
	else if $use_default_shader == 1
		run = CustomShaderTransparencyDefault1
		$use_default_shader = -1
	endif
	ps-t69 = null
endif

; Regex Match ---------------------------------------
;Match Outline
[ShaderRegexOutlineTransparency.Pattern]
(?P<MatchDiffuse>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n
^[\s\S]+^if_nz r0\.x\n)
(?s)(?P<TillModesty>.*?)
(?P<Modesty>discard\w+ \w+\.[xyzw]+\n)
(?P<TillRet>.*)
ret

[ShaderRegexOutlineTransparency.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t69
dcl_sampler s15, mode_default

[ShaderRegexOutlineTransparency.Pattern.Replace]
${MatchDiffuse}
${TillModesty}
ld_indexable(texture1d)(float,float,float,float) ${ini}.xxxx, l(69,0), t120.zzzz\n
; if $modesty
if_nz ${ini}.x\n
	${Modesty}\n
endif\n
${TillRet}
sample_indexable(texture2d)(float,float,float,float) ${tex69}.xyzw, v2.xy, t69.xyzw, s15\n
max ${tex69}.w, l(0.0), ${tex69}.w\n
if_nz ${tex69}.w\n
	discard_nz ${tex69}.x\n
endif\n
ret
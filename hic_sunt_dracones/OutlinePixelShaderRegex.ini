namespace = TexFx

[ShaderRegexOutlineTransparency]
shader_model = ps_5_0 ps_5_1
temps = ini tex69
if ps-t69 === 0 && $texfx_on == 1
	run = CommandListSetResourceReferences
	if $use_default_shader == 0
		$use_default_shader = -1
		run = CustomShaderTransparencyDefault0
	endif
	if $use_default_shader == 1
		$use_default_shader = -1
		if ps == 037730.0
			run = CustomShaderTransparencyDefault0
		else
			run = CustomShaderTransparencyDefault1
		endif
	endif
	ps-t69 = null
endif

; Regex Match ---------------------------------------
;Match Outline
[ShaderRegexOutlineTransparency.Pattern]
(?P<MatchDiffuse>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n
^[\s\S]+)
(?s)(?P<TillModesty>^discard_nz r0.[xy]\nne r0.*\nif_nz r0\.[xy]\n\s*lt.*?)
(?P<Modesty>discard\w+ \w+\.[xyzw]+\n)
(?P<TillRet>.*)
ret

[ShaderRegexOutlineTransparency.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t69
dcl_sampler s15, mode_default


[ShaderRegexOutlineTransparency.Pattern.Replace]
${MatchDiffuse}
ld_indexable(texture1d)(float,float,float,float) ${ini}.xyzw, l(69,0), t120.xyzw\n
${TillModesty}
; if $uncensor
if_z ${ini}.z\n
	${Modesty}\n
endif\n
${TillRet}
if_z ${ini}.y\n
sample_indexable(texture2d)(float,float,float,float) ${tex69}.xyzw, v2.xy, t69.xyzw, s15\n
max ${tex69}.w, l(0.0), ${tex69}.w\n
	if_nz ${tex69}.w\n
		discard_nz ${tex69}.x\n
	endif\n
endif\n
ret
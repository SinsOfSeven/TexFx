namespace = TexFx

[ShaderRegexDiffuseTransparency]
shader_model = ps_5_0
temps = ini tex69 dim
run = CommandListResetResources
ps-t69 = null

;Cute regex to match (almost) every character diffuse shader and outline
[ShaderRegexDiffuseTransparency.Pattern]
(?P<MatchDiffuse>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n
^[\s\S]+)
(?s)(?P<TillModesty>^discard_nz r0\.[xy]\nif_nz r0.[xy]\n\s*lt.*?)
(?P<Modesty>discard\w+ \w+\.[xyzw]+\n)
(?P<TillRet>.*)
ret

[ShaderRegexDiffuseTransparency.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t69
dcl_sampler s15, mode_default

;Inserts a discard statement if any pixel from our ps-t69 texture is not OPAQUE
[ShaderRegexDiffuseTransparency.Pattern.Replace]
${MatchDiffuse}
ld_indexable(texture1d)(float,float,float,float) ${ini}.xyzw, l(69,0), t120.xyzw\n
${TillModesty}
if_z ${ini}.z\n
	${Modesty}\n
endif\n
${TillRet}
if_z ${ini}.y\n
	resinfo_indexable(texture2d)(float,float,float,float) ${dim}.xy, l(0), t69.xyzw\n
	if_nz ${dim}.xy\n
		sample_indexable(texture2d)(float,float,float,float) ${tex69}.xyzw, v2.xy, t69.xyzw, s15\n
		discard_nz ${tex69}.x\n
	endif\n
endif\n
ret
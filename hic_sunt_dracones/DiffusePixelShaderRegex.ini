namespace = TexFx

[ShaderRegexFxDiffuse]
shader_model = ps_5_0
temps = ini tex69 pass coord out1 out2
run = CommandListResetResources
ps-u7 = ResourceUAV
dump = ResourceUAV

;Cute regex to match (almost) every character diffuse shader and outline
[ShaderRegexFxDiffuse.Pattern]
(?P<MatchDiffuse>
dcl_output o0\.xyzw\n
dcl_output o1\.xyzw\n
dcl_output o2\.xyzw\n
dcl_output o3\.x\n
dcl_output o4\.x\n
dcl_output o5\.x\n)
(?s)(?P<TillModesty>^[\s\S]+^if_nz r0\.y\n.*?)
(?P<Modesty>discard\w+ \w+\.[xyzw]+\n)
(?P<TillRet>.*o1\.[xyzw]+, (?P<o1>\w\d+)\..*)
ret

[ShaderRegexFxDiffuse.InsertDeclarations]
dcl_uav_typed_texture2d (float,float,float,float) u7
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t69
dcl_sampler s15, mode_default

;Inserts a discard statement if any pixel from our ps-t69 texture is not OPAQUE
[ShaderRegexFxDiffuse.Pattern.Replace]
${MatchDiffuse}
${TillModesty}
ld_indexable(texture1d)(float,float,float,float) ${ini}.xyzw, l(69,0), t120.xyzw\n
; if $modesty
if_nz ${ini}.x\n
	${Modesty}\n
endif\n
${TillRet}
;store_uav_typed u7.xyzw, ${coord}.xyzw, l(1.0,0.0,0.0,1.0)\n
sample_indexable(texture2d)(float,float,float,float) ${tex69}.xyzw, v2.xy, t69.xyzw, s15\n
;detect
max ${tex69}.w, l(0.0), ${tex69}.w\n
;red
if_nz ${tex69}.w\n
	if_nz ${tex69}.x\n
		add ${tex69}.w, ${tex69}.x, l(-1.0)\n
		if_nz ${tex69}.w\n
			ftou ${coord}.xyzw, v0.xyzw\n
			store_uav_typed u7.xyz, ${coord}.xyzw, ${o1}.xyz\n
		endif\n
	endif\n
	discard_nz ${tex69}.x\n
endif\n
;discard_z ${tex69}.x\n
ret